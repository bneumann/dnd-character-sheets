<div class=@Classes>
    <div class="@CheckedClass()" @onclick="_ => UpdateChecked()"></div>
    <input type="text" @onchange="args => UpdateValue(args)" />
    <label>@Label</label>
    @if (!string.IsNullOrWhiteSpace(Ability))
    {
        <span class="d-and-d-skill-hint">(@Ability)</span>
    }
</div>
@code {
    private const string StatBoxClassCss = "d-and-d-skill";

    [Parameter]
    public bool Checked { get; set; } = false;
    [Parameter]
    public int Value { get; set; }
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string Ability { get; set; } = "";

    private string classes = StatBoxClassCss;
    [Parameter]
    public string Classes
    {
        get => classes;
        set => classes = $"{StatBoxClassCss} {value}";
    }
    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }
    private async Task UpdateValue(ChangeEventArgs args)
    {
        int.TryParse((string)args.Value, out var value);
        await ValueChanged.InvokeAsync(value);
    }

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }
    private async Task UpdateChecked()
    {
        Checked = !Checked;
        await CheckedChanged.InvokeAsync(Checked);
    }


    public string CheckedClass() => Checked ? "d-and-d-skill-circle active" : "d-and-d-skill-circle";

}
